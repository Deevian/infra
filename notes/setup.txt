# Show disks by ID
ls -lah /dev/disk/by-id/

# Setup zfs mirror, tank dataset
apt install zfsutils-linux
zpool create tank mirror -m /mnt/tank -o ashift=12 /dev/disk/by-id/disk-1-id /dev/disk/by-id/disk-2-id

# Attach new disk to mirror
zpool attach tank existing-disk-id new-disk-id

# List zfs pools
zpool list

# List zfs mounts
zfs list

# Create tank datasets
zfs create tank/backups
zfs create tank/fuse

# Create host datasets
zfs create rpool/appdata
zfs create rpool/downlods

# Set host datasets mountpoints
zfs set mountpoint=/mnt/nvme0n1/appdata rpool/appdata
zfs set mountpoint=/mnt/nvme0n1/downloads rpool/downloads

# Format storage disks as xfs
gdisk /dev/sdX
    o - creates a new EMPTY GPT partition table (GPT is good for large drives over 3TB)
        Proceed? (Y/N) - Y
    n - creates a new partition
        Partition number (1-128, default 1): 1
        First sector (34-15628053134, default = 2048) or {+-}size{KMGTP}: leave blank
        Last sector (2048-15628053134, default = 15628053134) or {+-}size{KMGTP}: leave blank
        Hex code or GUID (L to show codes, Enter = 8300): 8300
    p - (optional) validate 1 large partition to be created
        Model: HGST HDN728080AL
        Number Start (sector) End (sector) Size Code Name
        1 2048 15628053134 7.3 TiB 8300 Linux filesystem
    w - writes the changes made thus far
        Until this point, gdisk has been non-destructive
        Confirm that making these changes is OK and the changes queued so far will be executed

mkfs.xfs /dev/sdX1

# Terraform user
pveum role modify TerraformProv -privs
pveum role add TerraformProv -privs "Datastore.AllocateSpace Datastore.Audit Pool.Allocate Sys.Audit VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.PowerMgmt"
pveum user add terraform-prov@pve --password <password>
pveum aclmod / -user terraform-prov@pve -role TerraformProv