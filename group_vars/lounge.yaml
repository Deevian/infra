---

target_os: ubuntu
hostname_lounge: lounge
main_username: root

# ktz-traefik
traefik_file_provider: true
traefik_enable_dashboard: true
traefik_insecure_transport: true
traefik_exposed_by_default: true

## ktz-authelia
authelia_rules:
  - domain: "*.{{ domain }}"
    policy: bypass
    resources:
      - '^/api.*$'
  - domain: "*.{{ domain }}"
    policy: one_factor
  - domain: "{{ domain }}"
    policy: bypass

# ironicbadger.docker_compose_generator
appdata_path: /mnt/appdata
download_path: /mnt/downloads
storage_path: /mnt/storage

containers:

  ###
  - service_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    extra_hosts:
      - host.docker.internal:172.17.0.1
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped

  ###
  - service_name: authelia
    active: true
    image: authelia/authelia
    labels:
      - "traefik.http.routers.authelia.rule=Host(`login.{{ domain }}`)"
      - traefik.http.routers.authelia.tls=true
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.{{ domain }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    volumes:
      - "{{ appdata_path }}/authelia:/config"
    expose:
    restart: unless-stopped

  ###
  - service_name: plex
    active: false
    image: plexinc/pms-docker
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.http.routers.plex.rule=Host(`plex.{{ domain }}`)"
      - traefik.http.services.plex.loadbalancer.server.port=32400
    volumes:
      - "{{ appdata_path }}/plex/config:/config"
      - "{{ appdata_path }}/plex/transcode:/transcode"
      - "{{ storage_path }}:/data:ro"
    include_global_env_vars: true
    restart: unless-stopped

  ###
  - service_name: plexmeta
    active: false
    image: meisnate12/plex-meta-manager
    depends_on:
      - plex
    volumes:
      - "{{ appdata_path }}/plexmeta/config:/config"
    labels:
      - traefik.enable=false
    environment:
      - TZ=Europe/Lisbon
      - PMM_TIME=01:22
    restart: unless-stopped

  ###
  - service_name: tautulli
    active: false
    image: linuxserver/tautulli
    depends_on:
      - plex
    labels:
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.{{ domain }}`)"
    volumes:
      - "{{ appdata_path }}/tautulli:/config"
      - "{{ appdata_path }}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    include_global_env_vars: true
    restart: unless-stopped

  ###
  - service_name: prowlarr
    active: false
    image: linuxserver/prowlarr:develop
    labels:
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ domain }}`)"
      - traefik.http.routers.prowlarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/prowlarr:/config"
    include_global_env_vars: true
    restart: unless-stopped

  ###
  - service_name: nzbget
    active: false
    image: linuxserver/nzbget
    labels:
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.{{ domain }}`)"
      - traefik.http.routers.nzbget.middlewares=authelia@docker
      - "traefik.http.routers.nzbgetapi.rule=Host(`nzbgetapi.{{ domain }}`)"
    volumes:
      - "{{ appdata_path }}/nzbget/config:/config"
      - "{{ download_path }}:/downloads"
    restart: unless-stopped
    include_global_env_vars: true

  ###
  - service_name: sonarr
    active: false
    image: linuxserver/sonarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain }}`)"
      - traefik.http.routers.sonarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}/complete/tv:/downloads/complete/tv"
      - /mnt/jbod/tv:/tv
    restart: unless-stopped
    include_global_env_vars: true

  ###
  - service_name: radarr
    active: false
    image: linuxserver/radarr
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ download_path }}/complete/movies:/downloads/complete/movies"
      - /mnt/jbod/movies:/movies
    labels:
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain }}`)"
      - traefik.http.routers.radarr.middlewares=authelia@docker
    restart: unless-stopped
    include_global_env_vars: true

  ###
  - service_name: lidarr
    active: false
    image: linuxserver/lidarr
    volumes:
      - "{{ appdata_path }}/lidarr:/config"
      - "{{ download_path }}/complete/music:/downloads/complete/music"
      - "{{ download_path }}/intermediate/music:/downloads-amd"
      - /mnt/storage/flac/flac:/music
    labels:
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.{{ domain }}`)"
      - traefik.http.routers.lidarr.middlewares=authelia@docker
    restart: unless-stopped
    include_global_env_vars: true

  ###
  - service_name: jellyfin
    active: false
    image: jellyfin/jellyfin
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ domain }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ storage_path }}:/data:ro"
      # ram transcode
      - /dev/shm:/transcode
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ domain }}"
    include_global_env_vars: true
    restart: unless-stopped

  ###
  - service_name: dozzle
    active: true
    image: amir20/dozzle
    labels:
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.{{ domain }}`)"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped