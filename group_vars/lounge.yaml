---

hostname: "{{ hosts.lounge.hostname }}"
hostname_lounge: "{{ hostname }}"

## deev-pkg
package_list:
  - gpg
  - python3-pip

## ironicbadger.docker_compose_generator
appdata_path: /mnt/appdata
wwwdata_path: /mnt/www-data

containers:
  - service_name: ghost
    active: true
    image: ghost:5-alpine
    network_mode: host
    volumes:
      - "{{ appdata_path }}/ghost:/var/lib/ghost/content"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "database__client=sqlite3"
      - "database__connection__filename=\"content/data/ghost.db\""
      - "database__useNullAsDefault=true"
      - "database__debug=false"
      - "url=https://ghost.lounge.{{ default_domain }}"

  - service_name: drone-server
    active: true
    image: drone/drone:latest
    network_mode: host
    volumes:
      - "{{ appdata_path }}/drone-data:/data/"
      - /var/run/docker.sock:/var/run/docker.sock
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "DRONE_GITHUB_SKIP_VERIFY=true"
      - "DRONE_SERVER_HOST=drone.{{ domain_deev }}"
      - "DRONE_SERVER_PROTO=https"
      - "DRONE_TLS_AUTOCERT=false"
      - "DRONE_GITHUB=true"
      - "DRONE_USER_CREATE=username:{{ drone_github_user }},machine:false,admin:true,token:{{ drone_github_token }}"
      - "DRONE_USER_FILTER={{ drone_github_user }}"
      - "DRONE_GITHUB_CLIENT_ID={{ drone_github_client_id }}"
      - "DRONE_GITHUB_CLIENT_SECRET={{ drone_github_client_secret }}"
      - "DRONE_RPC_SECRET={{ drone_rpc_secret }}"

  - service_name: drone-docker-agent
    active: true
    image: drone/drone-runner-docker:latest
    network_mode: host
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ wwwdata_path }}:{{ wwwdata_path }}"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "DRONE_RPC_PROTO=https"
      - "DRONE_RPC_HOST=drone.{{ domain_deev }}"
      - "DRONE_RPC_SECRET={{ drone_rpc_secret }}"

  - service_name: matomo-db
    active: true
    image: mariadb:10.11
    command: "--max-allowed-packet=64MB"
    volumes:
      - "{{ appdata_path }}/matomo/db:/var/lib/mysql:Z"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "MYSQL_ROOT_PASSWORD={{ matomo_mariadb_root_password }}"
      - "MARIADB_DISABLE_UPGRADE_BACKUP=1"
      - "MYSQL_PASSWORD={{ matomo_mariadb_password }}"
      - "MYSQL_DATABASE=matomo"
      - "MYSQL_USER=matomo"
      - "MATOMO_DATABASE_ADAPTER=mysql"
      - "MATOMO_DATABASE_TABLES_PREFIX=matomo_"
      - "MATOMO_DATABASE_USERNAME=matomo"
      - "MATOMO_DATABASE_PASSWORD={{ matomo_mariadb_db_password }}"
      - "MATOMO_DATABASE_DBNAME=matomo"
      - "MARIADB_AUTO_UPGRADE=1"
      - "MARIADB_INITDB_SKIP_TZINFO=1"

  - service_name: matomo-app
    active: true
    image: matomo:fpm-alpine
    volumes:
      - "{{ appdata_path }}/matomo/config:/var/www/html/config:z"
      - "{{ appdata_path }}/matomo/www-data:/var/www/html:z"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "MATOMO_DATABASE_HOST=matomo-db"
      - "PHP_MEMORY_LIMIT=2048M"
      - "MYSQL_PASSWORD={{ matomo_mariadb_password }}"
      - "MYSQL_DATABASE=matomo"
      - "MYSQL_USER=matomo"
      - "MATOMO_DATABASE_ADAPTER=mysql"
      - "MATOMO_DATABASE_TABLES_PREFIX=matomo_"
      - "MATOMO_DATABASE_USERNAME=matomo"
      - "MATOMO_DATABASE_PASSWORD={{ matomo_mariadb_db_password }}"
      - "MATOMO_DATABASE_DBNAME=matomo"
      - "MARIADB_AUTO_UPGRADE=1"
      - "MARIADB_INITDB_SKIP_TZINFO=1"

  - service_name: matomo-nginx
    active: true
    image: nginx:alpine
    volumes:
      - "{{ appdata_path }}/matomo/www-data:/var/www/html:z,ro"
      - "{{ appdata_path }}/matomo/matomo.conf:/etc/nginx/conf.d/default.conf:z,ro"
    include_global_env_vars: true
    restart: unless-stopped
    ports:
      - 8080:80

  - service_name: paperless-redis
    active: true
    image: docker.io/library/redis:7
    volumes:
      - "{{ appdata_path }}/paperless-redis:/data"
    include_global_env_vars: true
    restart: unless-stopped

  - service_name: paperless
    active: true
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    depends_on:
      - paperless-redis
    volumes:
      - "{{ appdata_path }}/paperless/data:/usr/src/paperless/data"
      - "{{ appdata_path }}/paperless/media:/usr/src/paperless/media"
      - "{{ appdata_path }}/paperless/export:/usr/src/paperless/export"
      - "{{ appdata_path }}/paperless/consume:/usr/src/paperless/consume"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "PAPERLESS_REDIS=redis://paperless-redis:6379"
      - "PAPERLESS_URL=https://paperless.{{ domain_deev }}"
      - "PAPERLESS_SECRET_KEY={{ paperless_secret }}"
      - "PAPERLESS_OCR_LANGUAGES=en por"
      - "PAPERLESS_TIME_ZONE={{ ntp_timezone }}"
    ports:
      - 8000:8000

  - service_name: mealie-frontend
    active: true
    image: hkotel/mealie:frontend-nightly
    volumes:
      - "{{ appdata_path }}/mealie:/app/data"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "API_URL=http://mealie-api:9000"
    ports:
      - 9925:3001

  - service_name: mealie-api
    active: true
    image: hkotel/mealie:api-nightly
    volumes:
      - "{{ appdata_path }}/mealie:/app/data"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "ALLOW_SIGNUP=false"
      - "MAX_WORKERS=1"
      - "WEB_CONCURRENCY=1"
      - "BASE_URL=https://mealie.{{ domain_deev }}"
      - "PUID=1000"
      - "PGID=1000"

  - service_name: vrising
    active: false
    image: fboulanger/docker-vrising:latest
    volumes:
      - "{{ appdata_path }}/vrising/server:/mnt/vrising/server:rw"
      - "{{ appdata_path }}/vrising/data:/mnt/vrising/persistentdata:rw"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "SERVERNAME=Lounge"
      - "WORLDNAME=lounge"
      - "GAMEPORT=27015"
      - "QUERYPORT=27016"
    ports:
      - 9876:9876/udp
      - 9877:9877/udp
      - 27015:27015/udp
      - 27016:27016/udp

  - service_name: lemmy
    active: true
    image: dessalines/lemmy:0.18
    volumes:
      - "{{ appdata_path }}/lemmy/lemmy.hjson:/config/config.hjson:Z"
    include_global_env_vars: true
    restart: unless-stopped
    depends_on:
      - lemmy-postgres
      - lemmy-pictrs
    environment:
      - "RUST_LOG=warn"
    ports:
      - 8536:8536

  - service_name: lemmy-ui
    active: true
    image: dessalines/lemmy-ui:0.18
    volumes:
      - "{{ appdata_path }}/lemmy/extra_themes:/app/extra_themes"
    include_global_env_vars: true
    restart: unless-stopped
    depends_on:
      - lemmy
    environment:
      - "LEMMY_UI_LEMMY_INTERNAL_HOST=lemmy:8536"
      - "LEMMY_UI_LEMMY_EXTERNAL_HOST=lemmy.{{ domain_deev }}"
      - "LEMMY_HTTPS=true"
    ports:
      - 1234:1234

  - service_name: lemmy-pictrs
    active: true
    image: asonix/pictrs:0.4.0-beta.19
    volumes:
      - "{{ appdata_path }}/lemmy/pictrs:/mnt:Z"
    include_global_env_vars: true
    restart: unless-stopped
    user: 991:991
    environment:
      - "PICTRS__API_KEY={{ lemmy_pictrs_api_key }}"
      - "RUST_LOG=debug"
      - "RUST_BACKTRACE=full"
      - "PICTRS__MEDIA__VIDEO_CODEC=vp9"
      - "PICTRS__MEDIA__GIF__MAX_WIDTH=256"
      - "PICTRS__MEDIA__GIF__MAX_HEIGHT=256"
      - "PICTRS__MEDIA__GIF__MAX_AREA=65536"
      - "PICTRS__MEDIA__GIF__MAX_FRAME_COUNT=400"
    deploy:
      resources:
        limits:
          memory: 690m

  - service_name: lemmy-postgres
    active: true
    image: postgres:15-alpine
    volumes:
      - "{{ appdata_path }}/lemmy/postgres:/var/lib/postgresql/data:Z"
      - "{{ appdata_path }}/lemmy/customPostgresql.conf:/etc/postgresql.conf"
    include_global_env_vars: true
    restart: unless-stopped
    environment:
      - "POSTGRES_USER=lemmy"
      - "POSTGRES_PASSWORD={{ lemmy_postgres_password }}"
      - "POSTGRES_DB=lemmy"
