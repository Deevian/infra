---
target_os: ubuntu
hostname_cartman: cartman

# ironicbadger.ansible_users
users:
  - username: "{{ main_username }}"
    github_username: ironicbadger
    name: "{{ main_username }}"
    groups: ["wheel", "docker"]
    uid: "{{ main_uid }}"
  - username: cat
    github_username: dropcat13
    name: cat
    groups: []
    uid: 1098
groups_to_create:
  - name: "{{ main_groupname }}"
    gid: "{{ main_gid }}"
  - name: wheel
  - name: docker

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: fio
  - name: git
  - name: htop
  - name: iftop
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nmap
  - name: openssh-server
  - name: open-vm-tools
  - name: python
  #- name: qemu-guest-agent
  - name: screen
  - name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: wireguard-tools
  - name: zfsutils-linux

# ferrarimarco.bash-aliases
bash_aliases:
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml --remove-orphans " }
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop"}
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -t snapshot" }

# ktz-cartman
cartman_main_storage_path: /mnt/storage

extra_mountpoints:
  - { path: "{{ cartman_main_storage_path }}" }
  - {
      path: /opt,
      diskbyid: "UUID=b8e63455-b4eb-430b-a714-c4f36cd513a5",
      fs: ext4,
      opts: "defaults,discard",
    }
  #- { path: /mnt/nvme350, diskbyid: "UUID=82d03ae9-5efe-4da2-bc14-9de173d4151f", fs: ext4, opts: "defaults,discard" }

parity_disks:
  - {
      path: /mnt/parity1,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G0Z7RZ-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/parity2,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G1016Z-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }

data_disks:
  - {
      path: /mnt/disk1,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G10VZZ-part1,
      fs: xfs,
      opts: defaults,
      content: true,
    }
  - {
      path: /mnt/disk2,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YHV69AD-part1,
      fs: xfs,
      opts: defaults,
      content: true,
    }
  - {
      path: /mnt/disk3,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ15VJD-part1,
      fs: xfs,
      opts: defaults,
      content: true,
    }
  - {
      path: /mnt/disk4,
      diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ2S3AD-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/disk5,
      diskbyid: /dev/disk/by-id/ata-HGST_HDN728080ALE604_R6GPPDTY-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/disk6,
      diskbyid: /dev/disk/by-id/ata-WDC_WD80EZAZ-11TDBA0_7SJ1EJAW-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/disk7,
      diskbyid: /dev/disk/by-id/ata-WDC_WD80EZAZ-11TDBA0_7SJ3JB4W-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/disk8,
      diskbyid: /dev/disk/by-id/ata-ST8000DM004-2CX188_WCT0N54S-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }
  - {
      path: /mnt/disk9,
      diskbyid: /dev/disk/by-id/ata-ST8000DM004-2CX188_WCT0NN0R-part1,
      fs: xfs,
      opts: defaults,
      content: false,
    }

zfs_disks:
  #- { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ373DD-part1, fs: xfs, opts: defaults, content: false }
  #- { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ7E2VD-part1, fs: xfs, opts: defaults, content: false }

fstab_mergerfs:
  - {
      source: "/mnt/disk*:/mnt/tank/fuse",
      mountpoint: "{{ cartman_main_storage_path }}",
      fs: fuse.mergerfs,
      opts: "defaults,nonempty,allow_other,use_ino,cache.files=off,moveonenospc=true,dropcacheonclose=true,minfreespace=200G,fsname=mergerfs",
    }

snapraid_email_address: alexktz@gmail.com
snapraid_gmail_pass: "{{ snapraid_email_password }}"
snapraid_healthcheck_io_uuid: "{{ snapraid_healthcheck_secret }}"

# ktz-traefik
enable_traefik_external_rules: true

# ironicbadger.docker_compose_generator
appdata_path: /mnt/tank/appdata
download_path: /opt/downloads # in use?
primary_domain: al.ktz.me

containers:
  ###
  - service_name: traefik
    container_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    extra_hosts:
      - host.docker.internal:172.17.0.1
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
  ###
  - service_name: authelia
    active: false
    image: authelia/authelia
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.rule=Host(`login.ktz.me`)
      - traefik.http.routers.authelia.entrypoints=websecure
      - traefik.http.routers.authelia.tls.certresolver=cloudflare
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.ktz.me/
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups
    volumes:
      - "{{ appdata_path }}/authelia:/config"
    restart: unless-stopped
  - service_name: redis
    active: false
    image: redis
    restart: unless-stopped
  ###
  - service_name: plex
    active: true
    image: plexinc/pms-docker
    network_mode: host
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.ktz.me`)
      - traefik.http.routers.plex.entrypoints=websecure
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.http.routers.plex.tls.certresolver=cloudflare
    volumes:
      - "{{ appdata_path }}/plex/config:/config"
      - "{{ cartman_main_storage_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: tautulli
    active: true
    image: linuxserver/tautulli
    depends_on:
      - plex
    labels:
      - traefik.enable=true
      - traefik.http.routers.tautulli.rule=(Host(`al.ktz.me`) && PathPrefix(`/tautulli`))
      - traefik.http.routers.tautulli.entrypoints=websecure
      - traefik.http.routers.tautulli.tls.certresolver=cloudflare
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
    volumes:
      - "{{ appdata_path }}/tautulli:/config"
      - "{{ appdata_path }}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nzbget
    active: true
    image: linuxserver/nzbget
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget.rule=(Host(`al.ktz.me`) && PathPrefix(`/nzbget`))
      - traefik.http.routers.nzbget.entrypoints=websecure
      - traefik.http.routers.nzbget.tls.certresolver=cloudflare
      - traefik.http.services.nzbget.loadbalancer.server.port=6789
    volumes:
      - "{{ appdata_path }}/nzbget/config:/config"
      - "{{ download_path }}:/downloads"
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: sonarr
    active: true
    image: linuxserver/sonarr:preview
    depends_on:
      - nzbget
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=(Host(`al.ktz.me`) && PathPrefix(`/sonarr`))
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=cloudflare
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}/complete/tv:/downloads/complete/tv"
      - /mnt/storage/tv:/tv
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: radarr
    active: true
    image: linuxserver/radarr
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ cartman_main_storage_path }}/movies:/movies"
      - "{{ download_path }}/complete/movies:/downloads/complete/movies"
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=(Host(`al.ktz.me`) && PathPrefix(`/radarr`))
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=cloudflare
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: tiddlywiki
    active: true
    image: mazzolino/tiddlywiki
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tiddlywiki.rule=Host(`wiki.ktz.me`)"
      - traefik.http.routers.tiddlywiki.entrypoints=websecure
      - traefik.http.routers.tiddlywiki.tls.certresolver=cloudflare
      - traefik.http.services.tiddlywiki.loadbalancer.server.port=8080
    volumes:
      - "{{ appdata_path }}/tiddlywiki:/var/lib/tiddlywiki"
    restart: unless-stopped
  ###
  - service_name: chowdown
    active: true
    image: gregyankovoy/chowdown
    labels:
      - traefik.enable=true
      - traefik.http.routers.chowdown.rule=(Host(`al.ktz.me`) && PathPrefix(`/chowdown`))
      - traefik.http.routers.chowdown.entrypoints=websecure
      - traefik.http.routers.chowdown.tls.certresolver=cloudflare
      - traefik.http.services.chowdown.loadbalancer.server.port=4000
    volumes:
      - "{{ appdata_path }}/chowdown/config:/config"
      - "{{ appdata_path }}/chowdown/recipes:/config/_recipes"
      - "{{ appdata_path }}/chowdown/posts:/config/_posts"
      - "{{ appdata_path }}/chowdown/images:/config/images"
    restart: unless-stopped
  ###
  - service_name: nextcloud
    active: true
    image: nextcloud:19
    depends_on:
      - mysql
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nc.rule=Host(`nc.ktz.cloud`)"
      - traefik.http.routers.nc.entrypoints=websecure
      - traefik.http.routers.nc.tls.certresolver=cloudflare
      - traefik.http.services.nc.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/nextcloud:/var/www/html"
    restart: unless-stopped
  ###
  - service_name: mysql
    active: true
    image: mariadb
    ports:
      - 3306:3306
    environment:
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_root_password }}"
      - "MYSQL_PASSWORD={{ container_mysql_password }}"
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    volumes:
      - "{{ appdata_path }}/mysql:/var/lib/mysql"
    # command:
    #   - "--transaction-isolation=READ-COMMITTED --binlog-format=ROW"
    restart: unless-stopped
  ###
  - service_name: grafana
    active: true
    image: grafana/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=(Host(`al.ktz.me`) && PathPrefix(`/grafana`))
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certresolver=cloudflare
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    environment:
      - "GF_SERVER_ROOT_URL=https://al.ktz.me/grafana"
      - "GF_SERVER_SERVE_FROM_SUB_PATH=true"
      - "GF_SERVER_DOMAIN=al.ktz.me"
    volumes:
      - "{{ appdata_path }}/grafana/data:/var/lib/grafana"
    restart: unless-stopped
  ###
  - service_name: influxdb
    active: true
    container_name: influx
    image: influxdb
    ports:
      - "8086:8086"
    volumes:
      - "{{ appdata_path }}/influxdb:/var/lib/influxdb"
    restart: unless-stopped
  ###
  - service_name: duplicati
    active: true
    image: linuxserver/duplicati
    hostname: "{{ hostname_cartman }}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.ktz.me`)
      - traefik.http.routers.duplicati.entrypoints=websecure
      - traefik.http.routers.duplicati.tls.certresolver=cloudflare
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
    volumes:
      - "{{ appdata_path }}/duplicati:/config"
      - "{{ cartman_main_storage_path }}/backups:/backups"
      - "{{ cartman_main_storage_path }}:/source/storage"
      - /mnt/tank:/source/tank
      - /opt:/source/opt
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: booksonic
    active: true
    image: linuxserver/booksonic:1.2-ls75
    volumes:
      - "{{ appdata_path }}/booksonic:/config"
      - "{{ cartman_main_storage_path }}/audiobooks:/books"
    labels:
      - traefik.enable=true
      - traefik.http.routers.booksonic.rule=(Host(`al.ktz.me`) && PathPrefix(`/booksonic`))
      - traefik.http.routers.booksonic.entrypoints=websecure
      - traefik.http.routers.booksonic.tls.certresolver=cloudflare
      - traefik.http.services.booksonic.loadbalancer.server.port=4040
    environment:
      - CONTEXT_PATH=booksonic
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: bsair
    active: false
    image: bs
    volumes:
      - "{{ appdata_path }}/booksonicair:/config"
      - "{{ cartman_main_storage_path }}/audiobooks:/books"
    ports:
      - 4040:4040
    labels:
      - traefik.enable=true
      - traefik.http.routers.booksonicair.rule=(Host(`al.ktz.me`) && PathPrefix(`/booksonicair`))
      - traefik.http.routers.booksonicair.entrypoints=websecure
      - traefik.http.routers.booksonicair.tls.certresolver=cloudflare
      - traefik.http.services.booksonicair.loadbalancer.server.port=4040
    environment:
      - CONTEXT_PATH=booksonicair
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: smokeping
    active: true
    image: linuxserver/smokeping
    volumes:
      - "{{ appdata_path }}/smokeping/config:/config"
      - "{{ appdata_path }}/smokeping/data:/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.smokeping.rule=(Host(`al.ktz.me`) && PathPrefix(`/smokeping`))
      - traefik.http.routers.smokeping.entrypoints=websecure
      - traefik.http.routers.smokeping.tls.certresolver=cloudflare
      - traefik.http.services.smokeping.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: gitea
    active: true
    image: gitea/gitea
    depends_on:
      - mysql
    environment:
      - "USER_UID={{ main_uid }}"
      - "USER_GID={{ main_gid }}"
      - "ROOT_URL=https://git.ktz.me"
      - "SSH_DOMAIN=git.ktz.me"
      - "APP_NAME=git.ktz.me"
      - "SSH_PORT=2222"
      - "DISABLE_REGISTRATION=true"
      - "REQUIRE_SIGNIN_VIEW=true"
    volumes:
      - "{{ appdata_path }}/gitea:/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.git.rule=Host(`git.ktz.me`)
      - traefik.http.routers.git.entrypoints=websecure
      - traefik.http.routers.git.tls.certresolver=cloudflare
      - traefik.http.services.git.loadbalancer.server.port=3000
    ports:
      - "3333:3000"
      - '"2222:2222"'
    restart: unless-stopped
  ###
  - service_name: sync
    active: true
    image: linuxserver/resilio-sync
    hostname: "{{ hostname_cartman }}"
    volumes:
      - "{{ appdata_path }}/sync:/config"
      - "{{ cartman_main_storage_path }}:/sync"
    labels:
      - traefik.enable=true
      - traefik.http.routers.btsync.rule=Host(`sync.ktz.me`)
      - traefik.http.routers.btsync.entrypoints=websecure
      - traefik.http.routers.btsync.tls.certresolver=cloudflare
      - traefik.http.services.btsync.loadbalancer.server.port=8888
    ports:
      - "55555:55555"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: speedtest
    active: true
    container_name: speedtest
    image: roest/docker-speedtest-analyser
    volumes:
      - "{{ appdata_path }}/speedtest:/var/www/html/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtest.rule=Host(`speedtest.ktz.me`)
      - traefik.http.routers.speedtest.entrypoints=websecure
      - traefik.http.routers.speedtest.tls.certresolver=cloudflare
      - traefik.http.services.speedtest.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    ports:
      - 8008:80
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.rule=Host(`librespeed.ktz.me`)
      - traefik.http.routers.librespeed.entrypoints=websecure
      - traefik.http.routers.librespeed.tls.certresolver=cloudflare
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - TELEMETRY=true
      - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: lychee
    active: true
    image: lycheeorg/lychee
    labels:
      - traefik.enable=true
      - traefik.http.routers.lychee.rule=Host(`gallery.ktz.me`)
      - traefik.http.routers.lychee.entrypoints=websecure
      - traefik.http.routers.lychee.tls.certresolver=cloudflare
      - traefik.http.services.lychee.loadbalancer.server.port=80
    depends_on:
      - mysql
    volumes:
      - "{{ appdata_path }}/lychee/config:/config"
      - "{{ appdata_path }}/lychee/uploads:/uploads"
      - "{{ appdata_path }}/lychee/sym:/sym"
    environment:
      - PHP_TZ=America/New_York
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=lychee
      - DB_DATABASE=lychee
      - "DB_PASSWORD={{ container_mysql_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: deepstack
    active: true
    image: deepquestai/deepstack
    container_name: deepstack
    ports:
      - 5000:5000
    volumes:
      - "{{ appdata_path }}/deepstack:/datastore"
    environment:
      - VISION-DETECTION=True
    restart: unless-stopped
  ###
  - service_name: ninja_nginx
    active: true
    image: nginx:mainline-alpine
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.rule=Host(`ninja.ktz.me`)
      - traefik.http.routers.nginx.entrypoints=websecure
      - traefik.http.routers.nginx.tls.certresolver=cloudflare
      - traefik.http.services.nginx.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/invoiceninja/ninja.conf:/etc/nginx/conf.d/default.conf:ro"
      - "{{ appdata_path }}/invoiceninja/storage:/var/www/app/storage"
      - "{{ appdata_path }}/invoiceninja/public/logo:/var/www/app/logo"
      - "{{ appdata_path }}/invoiceninja/public:/var/www/app/public"
    restart: unless-stopped
  ###
  - service_name: invoiceninja
    active: true
    image: invoiceninja/invoiceninja:4.5.18
    depends_on:
      - mysql
    volumes:
      - "{{ appdata_path }}/invoiceninja/storage:/var/www/app/storage"
      - "{{ appdata_path }}/invoiceninja/public/logo:/var/www/app/logo"
      - "{{ appdata_path }}/invoiceninja/public:/var/www/app/public"
    environment:
      - MYSQL_DATABASE=ninja
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_password}}"
      - APP_DEBUG=0
      - "APP_URL={{ invoice_ninja_app_url }}"
      - "APP_KEY={{ invoice_ninja_app_key }}"
      - APP_CIPHER=AES-256-CBC
      - DB_USERNAME=root
      - "DB_PASSWORD={{ container_mysql_password}}"
      - DB_HOST=mysql
      - DB_DATABASE=ninja
      - MAIL_HOST=smtp.gmail.com
      - "MAIL_USERNAME={{ gmail_address }}"
      - "MAIL_PASSWORD={{ gmail_password }}"
      - MAIL_DRIVER=smtp
      - MAIL_FROM_NAME="Alex K"
      - "MAIL_FROM_ADDRESS={{ gmail_address }}"
      - REQUIRE_HTTPS=true
      - "TRUSTED_PROXIES='*'"
    restart: unless-stopped
  ###
  - service_name: miniflux
    active: true
    image: miniflux/miniflux
    labels:
      - traefik.enable=true
      - traefik.http.routers.miniflux.rule=Host(`rss.ktz.me`)
      - traefik.http.routers.miniflux.entrypoints=websecure
      - traefik.http.routers.miniflux.tls.certresolver=cloudflare
      - traefik.http.services.miniflux.loadbalancer.server.port=8080
    volumes:
      - "{{ appdata_path }}/miniflux:/config"
    depends_on:
      - minifluxdb
    environment:
      - "DATABASE_URL=postgres://{{ miniflux_db_user }}:{{ miniflux_db_password }}@minifluxdb/miniflux?sslmode=disable"
      - ADMIN_USERNAME=admin
      - "ADMIN_PASSWORD={{ miniflux_db_password }}"
      - BASE_URL=https://rss.ktz.me
    restart: unless-stopped
  - service_name: minifluxdb
    active: true
    image: postgres
    volumes:
      - "{{ appdata_path }}/postgres_miniflux:/var/lib/postgresql/data"
    environment:
      - "POSTGRES_USER={{ miniflux_db_user }}"
      - "POSTGRES_PASSWORD={{ miniflux_db_password }}"
      - POSTGRES_DB=miniflux
    restart: unless-stopped
  ###
  - service_name: monica
    active: false
    image: monica
    labels:
      - traefik.enable=true
      - traefik.http.routers.monica.rule=(Host(`al.ktz.me`) && PathPrefix(`/monica`))
      - traefik.http.routers.monica.entrypoints=websecure
      - traefik.http.routers.monica.tls.certresolver=cloudflare
      - traefik.http.services.monica.loadbalancer.server.port=80
    ports:
      - 8901:80
    depends_on:
      - db
    environment:
      - APP_KEY=F5HZSjEOwValEIfzgaZ2E6gZUUf3Fu38
      - APP_URL=https://al.ktz.me/monica
      - "APP_FORCE_URL=true"
      - DB_HOST=db
    volumes:
      - "{{ appdata_path }}/monica/app:/var/www/html/storage"
    restart: unless-stopped
  - service_name: db
    active: false
    container_name: db
    image: mariadb
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=true
      - MYSQL_PASSWORD=secret
      - MYSQL_DATABASE=monica
      - MYSQL_USER=homestead
    volumes:
      - "{{ appdata_path }}/monica/db:/var/lib/mysql"
    restart: unless-stopped
###
  - service_name: scrutiny
    active: true
    image: linuxserver/scrutiny
    labels:
      - traefik.enable=true
      - traefik.http.routers.scrutiny.rule=Host(`scrutiny.ktz.me`)
      - traefik.http.routers.scrutiny.entrypoints=websecure
      - traefik.http.routers.scrutiny.tls.certresolver=cloudflare
      - traefik.http.services.scrutiny.loadbalancer.server.port=8080
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    devices:
      - /dev:/dev
    volumes:
      - "{{ appdata_path }}/scrutiny:/config" 
      - /run/udev:/run/udev:ro
    include_global_env_vars: true
    environment:
      - SCRUTINY_COLLECTOR=true
      - SCRUTINY_WEB=true
    privileged: true
    restart: unless-stopped
  ###
  - service_name: stikked
    active: false
    image: ironicbadger/stikked
    labels:
      - traefik.enable=true
      - traefik.http.routers.stikked.rule=Host(`paste.ktz.me`)
      - traefik.http.routers.stikked.entrypoints=websecure
      - traefik.http.routers.stikked.tls.certresolver=cloudflare
      - traefik.http.services.stikked.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/stikked/data:/config"
      - "{{ appdata_path }}/stikked/stikked.php:/defaults/stikked.php"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: mysql_stikked
    active: false
    image: mariadb
    environment:
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_root_password }}"
      - "MYSQL_PASSWORD={{ container_mysql_password }}"
      - MYSQL_DATABASE=stikked
      - MYSQL_USER=stikked
    volumes:
      - "{{ appdata_path }}/stikked/db:/var/lib/mysql"
    command:
      - "--innodb-buffer-pool-size=4000000000"
    restart: unless-stopped
###
  - service_name: recipes-db
    active: true
    image: postgres:11-alpine
    volumes:
      - "{{ appdata_path }}/recipes/db:/var/lib/postgresql/data"
    restart: unless-stopped
  - service_name: recipes-backend
    active: true
    image: vabene1111/recipes
    depends_on:
      - recipes-db
    volumes:
      - "{{ appdata_path }}/recipes/staticfiles:/opt/recipes/staticfiles"
      - "{{ appdata_path }}/recipes/mediafiles:/opt/recipes/mediafiles"
    restart: unless-stopped
  - service_name: recipes-nginx
    active: true
    image: nginx:mainline-alpine
    depends_on:
      - recipes-db
      - recipes-backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.recipes.rule=Host(`recipes.ktz.me`)
      - traefik.http.routers.recipes.entrypoints=websecure
      - traefik.http.routers.recipes.tls.certresolver=cloudflare
      - traefik.http.services.recipes.loadbalancer.server.port=8080
    volumes:
      - "{{ appdata_path }}/mediafiles:/media"
      - "{{ appdata_path }}/nginx/conf.d:/etc/nginx/conf.d"
    restart: unless-stopped

  # template for docker-compose services
  #
  ###
  # - service_name:
  #   active: true
  #   image:
  #   container_name: #optional - only required if diff to service_name
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.XXXXXXX.rule=Host(`ninja.ktz.me`)
  #     - traefik.http.routers.XXXXXXX.entrypoints=websecure
  #     - traefik.http.routers.XXXXXXX.tls.certresolver=cloudflare
  #     - traefik.http.services.XXXXXXX.loadbalancer.server.port=80
  #   volumes:
  #     - "{{ appdata_path }}/app:/config"
  #   environment:
  #     -
  #   include_global_env_vars: #optional - defaults to false
  #   restart: unless-stopped

## snapraid
snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
        - "/mnt/disk1"
        - "/mnt/disk2"
        - "/mnt/disk3"
        - "/mnt/disk4"
        - "/mnt/disk5"
        - "/mnt/disk6"
        - "/mnt/disk7"
        - "/mnt/disk8"
        - "/mnt/disk9"
        - "/mnt/parity1"
        - "/mnt/parity2"
        - "/mnt/storage"
        - "/mnt/tank"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "ens192"
