---

target_os: ubuntu
hostname_cartman: cartman

# ironicbadger.ansible_users
users:
  - username: "{{ main_username }}"
    github_username: ironicbadger
    name: "{{ main_username }}"
    groups: ['wheel','docker']
    uid: "{{ main_uid }}"
  - username: cat
    github_username: dropcat13
    name: cat
    groups: []
    uid: 1098
groups_to_create:
  - name: "{{ main_groupname }}"
    gid: "{{ main_gid }}"
  - name: wheel
  - name: docker

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: fio
  - name: git
  - name: htop
  - name: iftop
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nmap
  - name: openssh-server
  - name: open-vm-tools
  - name: python
  #- name: qemu-guest-agent
  - name: screen
  - name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: wireguard-tools
  - name: zfsutils-linux

# ferrarimarco.bash-aliases
bash_aliases:
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml " }
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop " }
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -t snapshot" }

# ktz-cartman
cartman_main_storage_path: /mnt/storage

extra_mountpoints:
  - { path: "{{ cartman_main_storage_path }}" }
  - { path: /opt, diskbyid: "UUID=b8e63455-b4eb-430b-a714-c4f36cd513a5", fs: ext4, opts: "defaults,discard" }
  #- { path: /mnt/nvme350, diskbyid: "UUID=82d03ae9-5efe-4da2-bc14-9de173d4151f", fs: ext4, opts: "defaults,discard" }
  

parity_disks:
  - { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G0Z7RZ-part1, fs: xfs, opts: defaults }
  - { path: /mnt/parity2, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G1016Z-part1, fs: xfs, opts: defaults }

data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G10VZZ-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YHV69AD-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ15VJD-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ2S3AD-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-HGST_HDN728080ALE604_R6GPPDTY-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD80EZAZ-11TDBA0_7SJ1EJAW-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk7, diskbyid: /dev/disk/by-id/ata-WDC_WD80EZAZ-11TDBA0_7SJ3JB4W-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk8, diskbyid: /dev/disk/by-id/ata-ST8000DM004-2CX188_WCT0N54S-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk9, diskbyid: /dev/disk/by-id/ata-ST8000DM004-2CX188_WCT0NN0R-part1, fs: xfs, opts: defaults, content: false }

zfs_disks:
  #- { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ373DD-part1, fs: xfs, opts: defaults, content: false }
  #- { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ7E2VD-part1, fs: xfs, opts: defaults, content: false }

fstab_mergerfs:
  - { source: "/mnt/disk*:/mnt/tank/fuse", mountpoint: "{{ cartman_main_storage_path }}", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,cache.files=off,moveonenospc=true,dropcacheonclose=true,minfreespace=200G,fsname=mergerfs" }

snapraid_email_address: alexktz@gmail.com
snapraid_gmail_pass: "{{ snapraid_email_password }}"
snapraid_healthcheck_io_uuid: "{{ snapraid_healthcheck_secret }}"

# ironicbadger.docker_compose_generator
appdata_path: /mnt/tank/appdata
download_path: /opt/downloads # in use?
primary_domain: al.ktz.me

containers:
  ###
  - service_name: traefik
    container_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    extra_hosts: 
      - host.docker.internal:172.17.0.1
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
###
  - service_name: authelia
    active: false
    image: authelia/authelia
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.rule=Host(`login.ktz.me`)
      - traefik.http.routers.authelia.entrypoints=websecure
      - traefik.http.routers.authelia.tls.certresolver=cloudflare
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.ktz.me/
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups
    volumes:
      - "{{ appdata_path }}/authelia:/config"
    restart: unless-stopped
  - service_name: redis
    active: false
    image: redis
    restart: unless-stopped
###
  - service_name: nginx
    active: true
    image: nginx
    container_name: nginx
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nginx.rule=Host(`{{ primary_domain }}`)"
      - traefik.http.routers.nginx.entrypoints=websecure
      - traefik.http.routers.nginx.tls.certresolver=cloudflare
      - traefik.http.services.nginx.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/nginx/www:/usr/share/nginx/html:ro"
    include_global_env_vars: false
    restart: unless-stopped
###  
  - service_name: plex
    active: true
    image: plexinc/pms-docker
    network_mode: host
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.ktz.me`)
      - traefik.http.routers.plex.entrypoints=websecure
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.http.routers.plex.tls.certresolver=cloudflare
    volumes:
      - "{{ appdata_path }}/plex/config:/config"
      - "{{ cartman_main_storage_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: nzbget
    active: true
    image: linuxserver/nzbget
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget.rule=(Host(`al.ktz.me`) && PathPrefix(`/nzbget`))
      - traefik.http.routers.nzbget.entrypoints=websecure
      - traefik.http.routers.nzbget.tls.certresolver=cloudflare
      - traefik.http.services.nzbget.loadbalancer.server.port=6789
    volumes:
      - "{{ appdata_path }}/nzbget/config:/config"
      - "{{ download_path }}:/downloads"
    restart: unless-stopped
    include_global_env_vars: true
###
  - service_name: sonarr
    active: true
    image: linuxserver/sonarr:preview
    depends_on:
      - nzbget
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=(Host(`al.ktz.me`) && PathPrefix(`/sonarr`))
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=cloudflare
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}/complete/tv:/downloads/complete/tv"
      - /mnt/storage/tv:/tv
    restart: unless-stopped
    include_global_env_vars: true
###
  - service_name: radarr
    active: true
    image: linuxserver/radarr
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ cartman_main_storage_path }}/movies:/movies"
      - "{{ download_path }}/complete/movies:/downloads/complete/movies"
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=(Host(`al.ktz.me`) && PathPrefix(`/radarr`))
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=cloudflare
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    restart: unless-stopped
    include_global_env_vars: true
###
  - service_name: tiddlywiki
    active: true
    image: mazzolino/tiddlywiki
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tiddlywiki.rule=Host(`wiki.ktz.me`)"
      - traefik.http.routers.tiddlywiki.entrypoints=websecure
      - traefik.http.routers.tiddlywiki.tls.certresolver=cloudflare
      - traefik.http.services.tiddlywiki.loadbalancer.server.port=8080
    volumes:
      - "{{ appdata_path }}/tiddlywiki:/var/lib/tiddlywiki" 
    restart: unless-stopped
###
  - service_name: chowdown
    active: true
    image: gregyankovoy/chowdown
    labels:
      - traefik.enable=true
      - traefik.http.routers.chowdown.rule=(Host(`al.ktz.me`) && PathPrefix(`/chowdown`))
      - traefik.http.routers.chowdown.entrypoints=websecure
      - traefik.http.routers.chowdown.tls.certresolver=cloudflare
      - traefik.http.services.chowdown.loadbalancer.server.port=4000
    volumes:
      - "{{ appdata_path }}/chowdown/config:/config"
      - "{{ appdata_path }}/chowdown/recipes:/config/_recipes"
      - "{{ appdata_path }}/chowdown/posts:/config/_posts"
      - "{{ appdata_path }}/chowdown/images:/config/images"
    restart: unless-stopped
###
  - service_name: nextcloud
    active: true
    image: nextcloud:19
    depends_on:
      - mysql
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nc.rule=Host(`nc.ktz.cloud`)"
      - traefik.http.routers.nc.entrypoints=websecure
      - traefik.http.routers.nc.tls.certresolver=cloudflare
      - traefik.http.services.nc.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/nextcloud:/var/www/html"
    restart: unless-stopped
###
  - service_name: mysql
    active: true
    image: mariadb
    environment:
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_root_password }}"
      - "MYSQL_PASSWORD={{ container_mysql_password }}"
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    volumes:
      - "{{ appdata_path }}/mysql:/var/lib/mysql"
    command: 
      - "--transaction-isolation=READ-COMMITTED --binlog-format=ROW"
    restart: unless-stopped
###
  - service_name: duplicati
    active: true
    image: linuxserver/duplicati
    hostname: "{{ hostname_cartman }}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.ktz.me`)
      - traefik.http.routers.duplicati.entrypoints=websecure
      - traefik.http.routers.duplicati.tls.certresolver=cloudflare
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
    volumes:
      - "{{ appdata_path }}/duplicati:/config"
      - "{{ cartman_main_storage_path }}/backups:/backups"
      - "{{ cartman_main_storage_path }}:/source/storage"
      - /mnt/tank:/source/tank
      - /opt:/source/opt
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: booksonic
    active: true
    image: linuxserver/booksonic:1.2-ls75
    container_name: booksonic
    volumes:
      - "{{ appdata_path }}/booksonic:/config"
      - "{{ cartman_main_storage_path }}/audiobooks:/books"
    labels:
      - traefik.enable=true
      - traefik.http.routers.booksonic.rule=(Host(`al.ktz.me`) && PathPrefix(`/booksonic`))
      - traefik.http.routers.booksonic.entrypoints=websecure
      - traefik.http.routers.booksonic.tls.certresolver=cloudflare
      - traefik.http.services.booksonic.loadbalancer.server.port=4040
    environment:
      - CONTEXT_PATH=booksonic
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: smokeping
    active: true
    image: linuxserver/smokeping
    volumes:
      - "{{ appdata_path }}/smokeping/config:/config"
      - "{{ appdata_path }}/smokeping/data:/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.smokeping.rule=(Host(`al.ktz.me`) && PathPrefix(`/smokeping`))
      - traefik.http.routers.smokeping.entrypoints=websecure
      - traefik.http.routers.smokeping.tls.certresolver=cloudflare
      - traefik.http.services.smokeping.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: gitea
    active: true
    image: gitea/gitea
    depends_on:
      - mysql
    environment:
      - "USER_UID={{ main_uid }}"
      - "USER_GID={{ main_gid }}"
      - "ROOT_URL=https://git.ktz.me"
      - "SSH_DOMAIN=git.ktz.me"
      - "APP_NAME=git.ktz.me"
      - "SSH_PORT=2222"
      - "DISABLE_REGISTRATION=true"
      - "REQUIRE_SIGNIN_VIEW=true"
    volumes:
      - "{{ appdata_path }}/gitea:/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.git.rule=Host(`git.ktz.me`)
      - traefik.http.routers.git.entrypoints=websecure
      - traefik.http.routers.git.tls.certresolver=cloudflare
      - traefik.http.services.git.loadbalancer.server.port=3000
    ports:
      - "3333:3000"
      - "\"2222:2222\""
    restart: unless-stopped
###
  - service_name: sync
    active: true
    image: linuxserver/resilio-sync
    hostname: "{{ hostname_cartman }}"
    volumes:
      - "{{ appdata_path }}/sync:/config"
      - "{{ cartman_main_storage_path }}:/sync"
    labels:
      - traefik.enable=true
      - traefik.http.routers.btsync.rule=Host(`sync.ktz.me`)
      - traefik.http.routers.btsync.entrypoints=websecure
      - traefik.http.routers.btsync.tls.certresolver=cloudflare
      - traefik.http.services.btsync.loadbalancer.server.port=8888
    ports:
      - "55555:55555"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: speedtest
    active: true
    container_name: speedtest
    image: roest/docker-speedtest-analyser
    volumes:
      - "{{ appdata_path }}/speedtest:/var/www/html/data"
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtest.rule=Host(`speedtest.ktz.me`)
      - traefik.http.routers.speedtest.entrypoints=websecure
      - traefik.http.routers.speedtest.tls.certresolver=cloudflare
      - traefik.http.services.speedtest.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    ports:
      - 8008:80
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.rule=Host(`librespeed.ktz.me`)
      - traefik.http.routers.librespeed.entrypoints=websecure
      - traefik.http.routers.librespeed.tls.certresolver=cloudflare
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - TELEMETRY=true
      - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: lychee
    active: true
    image: lycheeorg/lychee
    labels:
      - traefik.enable=true
      - traefik.http.routers.lychee.rule=Host(`gallery.ktz.me`)
      - traefik.http.routers.lychee.entrypoints=websecure
      - traefik.http.routers.lychee.tls.certresolver=cloudflare
      - traefik.http.services.lychee.loadbalancer.server.port=80
    depends_on:
      - mysql
    volumes:
      - "{{ appdata_path }}/lychee/config:/config"
      - "{{ appdata_path }}/lychee/uploads:/uploads"
      - "{{ appdata_path }}/lychee/sym:/sym"
    environment:
      - PHP_TZ=America/New_York
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=lychee
      - DB_DATABASE=lychee
      - "DB_PASSWORD={{ container_mysql_password }}"
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: deepstack
    active: true
    image: deepquestai/deepstack
    container_name: deepstack
    ports:
      - 5000:5000
    volumes:
      - "{{ appdata_path }}/deepstack:/datastore" 
    environment:
      - VISION-DETECTION=True
    restart: unless-stopped

  # template for docker-compose services
  #
  # - service_name:
  #   active:
  #   image:
  #   container_name:
  #   ports:
  #     -
  #   volumes:
  #     - "{{ appdata_path }}/app:/config" 
  #   environment:
  #     -
  #   nginx_configs_rp_enabled: false
  #   nginx_configs_rp_type: ""
  #   include_global_env_vars: false
  #   restart: unless-stopped




## snapraid
snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
        - "/mnt/disk1"
        - "/mnt/disk2"
        - "/mnt/disk3"
        - "/mnt/disk4"
        - "/mnt/disk5"
        - "/mnt/disk6"
        - "/mnt/disk7"
        - "/mnt/disk8"
        - "/mnt/disk9"
        - "/mnt/parity1"
        - "/mnt/parity2"
        - "/mnt/storage"
        - "/mnt/tank"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "ens192"
